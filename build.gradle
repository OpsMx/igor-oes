/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'io.spinnaker.project' version "$spinnakerGradleVersion" apply false
  id 'java-library'
  id 'groovy'
}

allprojects {
  apply plugin: 'io.spinnaker.project'
  repositories {
    mavenLocal()
    mavenCentral()
  }
}

subprojects {
  group = "io.spinnaker.igor"
  repositories {
    mavenLocal()
    mavenCentral()
  }

  if ([korkVersion, fiatVersion].find { it.endsWith('-SNAPSHOT') }) {
    repositories {
      mavenLocal()
      maven{
        url "https://nexus.opsmx.net/repository/maven-snapshots/"
                          credentials {
                    username = "NEXUS_USERNAME"
                    password = "NEXUS_PASSWORD"
                         }
      }
    }
  }

  if (name != "igor-bom") {
    apply plugin: 'java-library'
    apply plugin: 'groovy'

    sourceSets.main.java.srcDirs = []
    sourceSets.main.groovy.srcDirs += ["src/main/java"]

    dependencies {
      implementation enforcedPlatform("io.spinnaker.kork:kork-bom:$korkVersion"){
        exclude group: "io.netty", module: "netty-codec-http"
      }
      compileOnly "org.projectlombok:lombok"
      annotationProcessor platform("io.spinnaker.kork:kork-bom:$korkVersion"){
        exclude group: "io.netty", module: "netty-codec-http"
      }
      annotationProcessor "org.projectlombok:lombok"
      testAnnotationProcessor platform("io.spinnaker.kork:kork-bom:$korkVersion"){
        exclude group: "io.netty", module: "netty-codec-http"
      }
      testAnnotationProcessor "org.projectlombok:lombok"

      implementation "org.springframework.boot:spring-boot-starter-actuator"

      // TODO(rz): Get rid of this dependency!
      implementation "net.logstash.logback:logstash-logback-encoder"

      // TODO(rz): Why does Spock need groovy as implementation and not testImplementation to find tests?
      implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0"

      implementation "org.apache.groovy:groovy"
      testImplementation "org.springframework.boot:spring-boot-starter-test"
      testImplementation "org.spockframework:spock-core"
      testImplementation "org.spockframework:spock-spring"
      testImplementation "org.springframework:spring-test"
      testImplementation "org.hamcrest:hamcrest-core"
      testImplementation "org.junit.jupiter:junit-jupiter-api"
      testImplementation "org.assertj:assertj-core"
      testRuntimeOnly "cglib:cglib-nodep:3.3.0"
      testRuntimeOnly "org.objenesis:objenesis"
      testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
      testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

      implementation "com.squareup.retrofit:retrofit:1.9.0"
      implementation "net.logstash.logback:logstash-logback-encoder:4.11"
      implementation "jakarta.validation:jakarta.validation-api:3.0.2"
      implementation "com.squareup.retrofit:converter-jackson:1.9.0"
    }

    tasks.withType(Copy).all {
      duplicatesStrategy 'exclude'
    }

    configurations.all {
      exclude group: 'org.codehaus.groovy', module: 'groovy'
    }

    test {
      testLogging {
        exceptionFormat = 'full'
        afterSuite { desc, result ->
          if (!desc.parent) { // will match the outermost suite
            println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            println "Report file: ${reports.html.entryPoint}"
          }
        }
      }
      useJUnitPlatform()
    }

    tasks.withType(JavaCompile).configureEach {
      javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(11)
      }
    }
    tasks.withType(Test).configureEach {
      javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
      }
    }

    tasks.withType(JavaExec) {
      if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8188'
      }
    }
    tasks.withType(Javadoc) {
      failOnError = false
    }
  }
}

defaultTasks 'run'
